/*!
 * jQuery Selectbox plugin 0.2
 *
 * Copyright 2011-2012, Dimitar Ivanov (http://www.bulgaria-web-developers.com/projects/javascript/selectbox/)
 * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
 * 
 * Date: Tue Jul 17 19:58:36 2012 +0300
 */

(function (jQuery, undefined) {
    var PROP_NAME = 'selectbox',
        FALSE = false,
        TRUE = true,
        selectbox_keys = "",
        selectbox_keys_timeout = 0;
    /**
     * Selectbox manager.
     * Use the singleton instance of this class, jQuery.selectbox, to interact with the select box.
     * Settings for (groups of) select boxes are maintained in an instance object,
     * allowing multiple different settings on the same page
     */
    function Selectbox() {
        this._state = [];
        this._defaults = { // Global defaults for all the select box instances
            classHolder: "sbHolder",
            classHolderDisabled: "sbHolderDisabled",
            classSelector: "sbSelector",
            classOptions: "sbOptions",
            classGroup: "sbGroup",
            classSub: "sbSub",
            classDisabled: "sbDisabled",
            classToggleOpen: "sbToggleOpen",
            classToggle: "sbToggle",
            classFocus: "sbFocus",
            speed: 200,
            effect: "slide", // "slide" or "fade"
            onChange: null, //Define a callback function when the selectbox is changed
            onOpen: null, //Define a callback function when the selectbox is open
            onClose: null //Define a callback function when the selectbox is closed
        };
    }

    jQuery.extend(Selectbox.prototype, {
        /**
         * Is the first field in a jQuery collection open as a selectbox
         * 
         * @param {Object} target
         * @return {Boolean}
         */
        _isOpenSelectbox: function (target) {
            if (!target) {
                return FALSE;
            }
            var inst = this._getInst(target);
            return inst.isOpen;
        },
        /**
         * Is the first field in a jQuery collection disabled as a selectbox
         * 
         * @param {HTMLElement} target
         * @return {Boolean}
         */
        _isDisabledSelectbox: function (target) {
            if (!target) {
                return FALSE;
            }
            var inst = this._getInst(target);
            return inst.isDisabled;
        },
        /**
         * Attach the select box to a jQuery selection.
         * 
         * @param {HTMLElement} target
         * @param {Object} settings
         */
        _attachSelectbox: function (target, settings) {
            if (this._getInst(target)) {
                return FALSE;
            }
            var jQuerytarget = jQuery(target),
                self = this,
                inst = self._newInst(jQuerytarget),
                sbHolder, sbSelector, sbToggle, sbOptions,
                s = FALSE, optGroup = jQuerytarget.find("optgroup"), opts = jQuerytarget.find("option"), olen = opts.length;

            jQuerytarget.attr("sb", inst.uid);

            jQuery.extend(inst.settings, self._defaults, settings);
            self._state[inst.uid] = FALSE;
            jQuerytarget.hide();

            function closeOthers() {
                var key, sel,
                    uid = this.attr("id").split("_")[1];
                for (key in self._state) {
                    if (key !== uid) {
                        if (self._state.hasOwnProperty(key)) {
                            sel = jQuery("select[sb='" + key + "']")[0];
                            if (sel) {
                                self._closeSelectbox(sel);
                            }
                        }
                    }
                }
            }

            sbHolder = jQuery("<div>", {
                "id": "sbHolder_" + inst.uid,
                "class": inst.settings.classHolder,
                "tabindex": jQuerytarget.attr("tabindex")
            });

            sbSelector = jQuery("<a>", {
                "id": "sbSelector_" + inst.uid,
                "href": "#",
                "class": inst.settings.classSelector,
                "click": function (e) {
                    e.preventDefault();
                    closeOthers.apply(jQuery(this), []);
                    var uid = jQuery(this).attr("id").split("_")[1];
                    if (self._state[uid]) {
                        self._closeSelectbox(target);
                    } else {
                        self._openSelectbox(target);
                    }
                }
            });

            sbToggle = jQuery("<a>", {
                "id": "sbToggle_" + inst.uid,
                "href": "#",
                "class": inst.settings.classToggle,
                "click": function (e) {
                    e.preventDefault();
                    closeOthers.apply(jQuery(this), []);
                    var uid = jQuery(this).attr("id").split("_")[1];
                    if (self._state[uid]) {
                        self._closeSelectbox(target);
                    } else {
                        self._openSelectbox(target);
                    }
                }
            });
            sbToggle.appendTo(sbHolder);

            sbOptions = jQuery("<ul>", {
                "id": "sbOptions_" + inst.uid,
                "class": inst.settings.classOptions,
                "css": {
                    "display": "none"
                }
            });

            jQuerytarget.children().each(function(i) {
                var that = jQuery(this), li, config = {};
                if (that.is("option")) {
                    getOptions(that);
                } else if (that.is("optgroup")) {
                    li = jQuery("<li>");
                    jQuery("<span>", {
                        "text": that.attr("label")
                    }).addClass(inst.settings.classGroup).appendTo(li);
                    li.appendTo(sbOptions);
                    if (that.is(":disabled")) {
                        config.disabled = true;
                    }
                    config.sub = true;
                    getOptions(that.find("option"), config);
                }
            });

            function getOptions () {
                var sub = arguments[1] && arguments[1].sub ? true : false,
                    disabled = arguments[1] && arguments[1].disabled ? true : false;
                arguments[0].each(function (i) {
                    var that = jQuery(this),
                        li = jQuery("<li>"),
                        child;
                    if (that.is(":selected")) {
                        sbSelector.text(that.text());
                        s = TRUE;
                    }
                    if (i === olen - 1) {
                        li.addClass("last");
                    }
                    if (!that.is(":disabled") && !disabled) {
                        child = jQuery("<a>", {
                            "href": "#" + that.val(),
                            "rel": that.val()
                        }).text(that.text()).bind("click.sb", function (e) {
                            if (e && e.preventDefault) {
                                e.preventDefault();
                            }
                            var t = sbToggle,
                                jQuerythis = jQuery(this),
                                uid = t.attr("id").split("_")[1];
                            self._changeSelectbox(target, jQuerythis.attr("rel"), jQuerythis.text());
                            self._closeSelectbox(target);
                        }).bind("mouseover.sb", function () {
                            var jQuerythis = jQuery(this);
                            jQuerythis.parent().siblings().find("a").removeClass(inst.settings.classFocus);
                            jQuerythis.addClass(inst.settings.classFocus);
                        }).bind("mouseout.sb", function () {
                            jQuery(this).removeClass(inst.settings.classFocus);
                        });
                        if (sub) {
                            child.addClass(inst.settings.classSub);
                        }
                        if (that.is(":selected")) {
                            child.addClass(inst.settings.classFocus);
                        }
                        child.appendTo(li);
                    } else {
                        child = jQuery("<span>", {
                            "text": that.text()
                        }).addClass(inst.settings.classDisabled);
                        if (sub) {
                            child.addClass(inst.settings.classSub);
                        }
                        child.appendTo(li);
                    }
                    li.appendTo(sbOptions);
                });
            }

            if (!s) {
                sbSelector.text(opts.first().text());
            }

            jQuery.data(target, PROP_NAME, inst);

            //sbHolder.data("uid", inst.uid).bind("keydown.sb", function (e) {
            sbHolder.data("uid", inst.uid).keypress(function(e) {
                var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0,
                    jQuerythis = jQuery(this),
                    uid = jQuerythis.data("uid"),
                    inst = jQuerythis.siblings("select[sb='"+uid+"']").data(PROP_NAME),
                    trgt = jQuerythis.siblings(["select[sb='", uid, "']"].join("")).get(0),
                    jQueryf = jQuerythis.find("ul").find("a." + inst.settings.classFocus);
                switch (key) {
                    case 37: //Arrow Left
                    case 38: //Arrow Up
                        if (jQueryf.length > 0) {
                            var jQuerynext;
                            jQuery("a", jQuerythis).removeClass(inst.settings.classFocus);
                            jQuerynext = jQueryf.parent().prevAll("li:has(a)").eq(0).find("a");
                            if (jQuerynext.length > 0) {
                                jQuerynext.addClass(inst.settings.classFocus).focus();
                                jQuery("#sbSelector_" + uid).text(jQuerynext.text());
                            }
                        }
                        break;
                    case 39: //Arrow Right
                    case 40: //Arrow Down
                        var jQuerynext;
                        jQuery("a", jQuerythis).removeClass(inst.settings.classFocus);
                        if (jQueryf.length > 0) {
                            jQuerynext = jQueryf.parent().nextAll("li:has(a)").eq(0).find("a");
                        } else {
                            jQuerynext = jQuerythis.find("ul").find("a").eq(0);
                        }
                        if (jQuerynext.length > 0) {
                            jQuerynext.addClass(inst.settings.classFocus).focus();
                            jQuery("#sbSelector_" + uid).text(jQuerynext.text());
                        }
                        break;              
                    case 13: //Enter
                        if (jQueryf.length > 0) {
                            self._changeSelectbox(trgt, jQueryf.attr("rel"), jQueryf.text());
                        }
                        self._closeSelectbox(trgt);
                        break;
                    case 9: //Tab
                        if (trgt) {
                            var inst = self._getInst(trgt);
                            if (inst/* && inst.isOpen*/) {
                                if (jQueryf.length > 0) {
                                    self._changeSelectbox(trgt, jQueryf.attr("rel"), jQueryf.text());
                                }
                                self._closeSelectbox(trgt);
                            }
                        }
                        var i = parseInt(jQuerythis.attr("tabindex"), 10);
                        if (!e.shiftKey) {
                            i++;
                        } else {
                            i--;
                        }
                        jQuery("*[tabindex='" + i + "']").focus();
                        break;
                    case 27: //Escape
                        self._closeSelectbox(trgt);
                        break;
                    default:
                        var theChar = String.fromCharCode(key);
                        var cur_check = selectbox_keys+theChar.toLowerCase();
                        jQuerynext = -1;
                        jQuerythis.find("ul").find("a").each(function() {
                            var text = jQuery(this).text().toLowerCase();
                            if (text.indexOf(cur_check) == 0) {
                                jQuerynext = jQuery(this);
                                selectbox_keys = cur_check;
                                return 0;
                            }
                        });

                        if (jQuerynext != -1) {
                            jQuery("a", jQuerythis).removeClass(inst.settings.classFocus);
                            jQuerynext.addClass(inst.settings.classFocus).focus();
                            jQuery("#sbSelector_" + uid).text(jQuerynext.text());
                        }

                        clearTimeout(selectbox_keys_timeout);
                        var selectbox_keys_timeout = setTimeout(function() {
                            selectbox_keys = "";    
                        },1500);
                        break;
                }
                e.stopPropagation();
                return false;
            }).delegate("a", "mouseover", function (e) {
                jQuery(this).addClass(inst.settings.classFocus);
            }).delegate("a", "mouseout", function (e) {
                jQuery(this).removeClass(inst.settings.classFocus);  
            });

            sbSelector.appendTo(sbHolder);
            sbOptions.appendTo(sbHolder);           
            sbHolder.insertAfter(jQuerytarget);

            jQuery("html").on('mousedown', function(e) {
                e.stopPropagation();          
                jQuery("select").selectbox('close'); 
            });
            jQuery([".", inst.settings.classHolder, ", .", inst.settings.classSelector].join("")).mousedown(function(e) {    
                e.stopPropagation();
            });
        },
        /**
         * Remove the selectbox functionality completely. This will return the element back to its pre-init state.
         * 
         * @param {HTMLElement} target
         */
        _detachSelectbox: function (target) {
            var inst = this._getInst(target);
            if (!inst) {
                return FALSE;
            }
            jQuery("#sbHolder_" + inst.uid).remove();
            jQuery.data(target, PROP_NAME, null);
            jQuery(target).show();           
        },
        /**
         * Change selected attribute of the selectbox.
         * 
         * @param {HTMLElement} target
         * @param {String} value
         * @param {String} text
         */
        _changeSelectbox: function (target, value, text) {
            var onChange,
                inst = this._getInst(target);
            if (inst) {
                onChange = this._get(inst, 'onChange');
                jQuery("#sbSelector_" + inst.uid).text(text);
            }
            value = value.replace(/\'/g, "\\'");
            jQuery(target).find("option[value='" + value + "']").attr("selected", TRUE);
            if (inst && onChange) {
                onChange.apply((inst.input ? inst.input[0] : null), [value, inst]);
            } else if (inst && inst.input) {
                inst.input.trigger('change');
            }
        },
        /**
         * Enable the selectbox.
         * 
         * @param {HTMLElement} target
         */
        _enableSelectbox: function (target) {
            var inst = this._getInst(target);
            if (!inst || !inst.isDisabled) {
                return FALSE;
            }
            jQuery("#sbHolder_" + inst.uid).removeClass(inst.settings.classHolderDisabled);
            inst.isDisabled = FALSE;
            jQuery.data(target, PROP_NAME, inst);
        },
        /**
         * Disable the selectbox.
         * 
         * @param {HTMLElement} target
         */
        _disableSelectbox: function (target) {
            var inst = this._getInst(target);
            if (!inst || inst.isDisabled) {
                return FALSE;
            }
            jQuery("#sbHolder_" + inst.uid).addClass(inst.settings.classHolderDisabled);
            inst.isDisabled = TRUE;
            jQuery.data(target, PROP_NAME, inst);
        },
        /**
         * Get or set any selectbox option. If no value is specified, will act as a getter.
         * 
         * @param {HTMLElement} target
         * @param {String} name
         * @param {Object} value
         */
        _optionSelectbox: function (target, name, value) {
            var inst = this._getInst(target);
            if (!inst) {
                return FALSE;
            }
            //TODO check name
            inst[name] = value;
            jQuery.data(target, PROP_NAME, inst);
        },
        /**
         * Call up attached selectbox
         * 
         * @param {HTMLElement} target
         */
        _openSelectbox: function (target) {
            var inst = this._getInst(target);
            //if (!inst || this._state[inst.uid] || inst.isDisabled) {
            if (!inst || inst.isOpen || inst.isDisabled) {
                return;
            }
            var el = jQuery("#sbOptions_" + inst.uid),
                viewportHeight = parseInt(jQuery(window).height(), 10),
                offset = jQuery("#sbHolder_" + inst.uid).offset(),
                scrollTop = jQuery(window).scrollTop(),
                height = el.prev().height(),
                diff = viewportHeight - (offset.top - scrollTop) - height / 2,
                onOpen = this._get(inst, 'onOpen');
            el.css({
                "top": height + "px",
                "maxHeight": (diff - height) + "px"
            });
            inst.settings.effect === "fade" ? el.fadeIn(inst.settings.speed) : el.slideDown(inst.settings.speed);
            jQuery("#sbToggle_" + inst.uid).addClass(inst.settings.classToggleOpen);
            this._state[inst.uid] = TRUE;
            inst.isOpen = TRUE;
            if (onOpen) {
                onOpen.apply((inst.input ? inst.input[0] : null), [inst]);
            }
            jQuery.data(target, PROP_NAME, inst);
        },
        /**
         * Close opened selectbox
         * 
         * @param {HTMLElement} target
         */
        _closeSelectbox: function (target) {
            var inst = this._getInst(target);
            //if (!inst || !this._state[inst.uid]) {
            if (!inst || !inst.isOpen) {
                return;
            }
            var onClose = this._get(inst, 'onClose');
            inst.settings.effect === "fade" ? jQuery("#sbOptions_" + inst.uid).fadeOut(inst.settings.speed) : jQuery("#sbOptions_" + inst.uid).slideUp(inst.settings.speed);
            jQuery("#sbToggle_" + inst.uid).removeClass(inst.settings.classToggleOpen);
            this._state[inst.uid] = FALSE;
            inst.isOpen = FALSE;
            if (onClose) {
                onClose.apply((inst.input ? inst.input[0] : null), [inst]);
            }
            jQuery.data(target, PROP_NAME, inst);
        },
        /**
         * Create a new instance object
         * 
         * @param {HTMLElement} target
         * @return {Object}
         */
        _newInst: function(target) {
            var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\jQuery1');
            return {
                id: id, 
                input: target, 
                uid: Math.floor(Math.random() * 99999999),
                isOpen: FALSE,
                isDisabled: FALSE,
                settings: {}
            }; 
        },
        /**
         * Retrieve the instance data for the target control.
         * 
         * @param {HTMLElement} target
         * @return {Object} - the associated instance data
         * @throws error if a jQuery problem getting data
         */
        _getInst: function(target) {
            try {
                return jQuery.data(target, PROP_NAME);
            }
            catch (err) {
                throw 'Missing instance data for this selectbox';
            }
        },
        /**
         * Get a setting value, defaulting if necessary
         * 
         * @param {Object} inst
         * @param {String} name
         * @return {Mixed}
         */
        _get: function(inst, name) {
            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
        }
    });

    /**
     * Invoke the selectbox functionality.
     * 
     * @param {Object|String} options
     * @return {Object}
     */
    jQuery.fn.selectbox = function (options) {

        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options == 'string' && options == 'isDisabled') {
            return jQuery.selectbox['_' + options + 'Selectbox'].apply(jQuery.selectbox, [this[0]].concat(otherArgs));
        }

        if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string') {
            return jQuery.selectbox['_' + options + 'Selectbox'].apply(jQuery.selectbox, [this[0]].concat(otherArgs));
        }

        return this.each(function() {
            typeof options == 'string' ?
                jQuery.selectbox['_' + options + 'Selectbox'].apply(jQuery.selectbox, [this].concat(otherArgs)) :
                jQuery.selectbox._attachSelectbox(this, options);
        });
    };

    jQuery.selectbox = new Selectbox(); // singleton instance
    jQuery.selectbox.version = "0.2";
})(jQuery);

/*
Old  Select Box Script Replaced With Aboved

(function(n,t){function f(){this._state=[],this._defaults={classHolder:"sbHolder",classHolderDisabled:"sbHolderDisabled",classSelector:"sbSelector",classOptions:"sbOptions",classGroup:"sbGroup",classSub:"sbSub",classDisabled:"sbDisabled",classToggleOpen:"sbToggleOpen",classToggle:"sbToggle",classFocus:"sbFocus",speed:200,effect:"slide",onChange:null,onOpen:null,onClose:null}}var r="selectbox",i=!1,u=!0;n.extend(f.prototype,{_isOpenSelectbox:function(n){if(!n)return i;var t=this._getInst(n);return t.isOpen},_isDisabledSelectbox:function(n){if(!n)return i;var t=this._getInst(n);return t.isDisabled},_attachSelectbox:function(t,f){function v(){var t,i,r=this.attr("id").split("_")[1];for(t in o._state)t!==r&&o._state.hasOwnProperty(t)&&(i=n("select[sb='"+t+"']")[0],i&&o._closeSelectbox(i))}function y(){var i=arguments[1]&&arguments[1].sub?!0:!1,r=arguments[1]&&arguments[1].disabled?!0:!1;arguments[0].each(function(f){var s=n(this),v=n("<li>"),h;s.is(":selected")&&(l.text(s.text()),w=u),f===b-1&&v.addClass("last"),s.is(":disabled")||r?(h=n("<span>",{text:s.text()}).addClass(e.settings.classDisabled),i&&h.addClass(e.settings.classSub),h.appendTo(v)):(h=n("<a>",{href:"#"+s.val(),rel:s.val()}).text(s.text()).bind("click.sb",function(i){i&&i.preventDefault&&i.preventDefault();var u=a,r=n(this),f=u.attr("id").split("_")[1];o._changeSelectbox(t,r.attr("rel"),r.text()),o._closeSelectbox(t)}).bind("mouseover.sb",function(){var t=n(this);t.parent().siblings().find("a").removeClass(e.settings.classFocus),t.addClass(e.settings.classFocus)}).bind("mouseout.sb",function(){n(this).removeClass(e.settings.classFocus)}),i&&h.addClass(e.settings.classSub),s.is(":selected")&&h.addClass(e.settings.classFocus),h.appendTo(v)),v.appendTo(c)})}if(this._getInst(t))return i;var s=n(t),o=this,e=o._newInst(s),h,l,a,c,w=i,k=s.find("optgroup"),p=s.find("option"),b=p.length;s.attr("sb",e.uid),n.extend(e.settings,o._defaults,f),o._state[e.uid]=i,s.hide(),h=n("<div>",{id:"sbHolder_"+e.uid,"class":e.settings.classHolder,tabindex:s.attr("tabindex")}),l=n("<a>",{id:"sbSelector_"+e.uid,href:"#","class":e.settings.classSelector,click:function(i){i.preventDefault(),v.apply(n(this),[]);var r=n(this).attr("id").split("_")[1];o._state[r]?o._closeSelectbox(t):o._openSelectbox(t)}}),a=n("<a>",{id:"sbToggle_"+e.uid,href:"#","class":e.settings.classToggle,click:function(i){i.preventDefault(),v.apply(n(this),[]);var r=n(this).attr("id").split("_")[1];o._state[r]?o._closeSelectbox(t):o._openSelectbox(t)}}),a.appendTo(h),c=n("<ul>",{id:"sbOptions_"+e.uid,"class":e.settings.classOptions,css:{display:"none"}}),s.children().each(function(){var i=n(this),u,r={};i.is("option")?y(i):i.is("optgroup")&&(u=n("<li>"),n("<span>",{text:i.attr("label")}).addClass(e.settings.classGroup).appendTo(u),u.appendTo(c),i.is(":disabled")&&(r.disabled=!0),r.sub=!0,y(i.find("option"),r))}),w||l.text(p.first().text()),n.data(t,r,e),h.data("uid",e.uid).bind("keydown.sb",function(t){var l=t.charCode?t.charCode:t.keyCode?t.keyCode:0,f=n(this),c=f.data("uid"),s=f.siblings("select[sb='"+c+"']").data(r),e=f.siblings(["select[sb='",c,"']"].join("")).get(0),i=f.find("ul").find("a."+s.settings.classFocus),u,h;switch(l){case 37:case 38:i.length>0&&(n("a",f).removeClass(s.settings.classFocus),u=i.parent().prevAll("li:has(a)").eq(0).find("a"),u.length>0&&(u.addClass(s.settings.classFocus).focus(),n("#sbSelector_"+c).text(u.text())));break;case 39:case 40:n("a",f).removeClass(s.settings.classFocus),u=i.length>0?i.parent().nextAll("li:has(a)").eq(0).find("a"):f.find("ul").find("a").eq(0),u.length>0&&(u.addClass(s.settings.classFocus).focus(),n("#sbSelector_"+c).text(u.text()));break;case 13:i.length>0&&o._changeSelectbox(e,i.attr("rel"),i.text()),o._closeSelectbox(e);break;case 9:e&&(s=o._getInst(e),s&&(i.length>0&&o._changeSelectbox(e,i.attr("rel"),i.text()),o._closeSelectbox(e))),h=parseInt(f.attr("tabindex"),10),t.shiftKey?h--:h++,n("*[tabindex='"+h+"']").focus();break;case 27:o._closeSelectbox(e)}return t.stopPropagation(),!1}).delegate("a","mouseover",function(){n(this).addClass(e.settings.classFocus)}).delegate("a","mouseout",function(){n(this).removeClass(e.settings.classFocus)}),l.appendTo(h),c.appendTo(h),h.insertAfter(s),n("html").live("mousedown",function(t){t.stopPropagation(),n("select").selectbox("close")}),n([".",e.settings.classHolder,", .",e.settings.classSelector].join("")).mousedown(function(n){n.stopPropagation()})},_detachSelectbox:function(t){var u=this._getInst(t);if(!u)return i;n("#sbHolder_"+u.uid).remove(),n.data(t,r,null),n(t).show()},_changeSelectbox:function(t,i,r){var e,f=this._getInst(t);f&&(e=this._get(f,"onChange"),n("#sbSelector_"+f.uid).text(r)),i=i.replace(/\'/g,"\\'"),n(t).find("option[value='"+i+"']").attr("selected",u),f&&e?e.apply(f.input?f.input[0]:null,[i,f]):f&&f.input&&f.input.trigger("change")},_enableSelectbox:function(t){var u=this._getInst(t);if(!u||!u.isDisabled)return i;n("#sbHolder_"+u.uid).removeClass(u.settings.classHolderDisabled),u.isDisabled=i,n.data(t,r,u)},_disableSelectbox:function(t){var f=this._getInst(t);if(!f||f.isDisabled)return i;n("#sbHolder_"+f.uid).addClass(f.settings.classHolderDisabled),f.isDisabled=u,n.data(t,r,f)},_optionSelectbox:function(t,u,f){var e=this._getInst(t);if(!e)return i;e[u]=f,n.data(t,r,e)},_openSelectbox:function(t){var i=this._getInst(t);if(i&&!i.isOpen&&!i.isDisabled){var f=n("#sbOptions_"+i.uid),l=parseInt(n(window).height(),10),h=n("#sbHolder_"+i.uid).offset(),c=n(window).scrollTop(),e=f.prev().height(),s=l-(h.top-c)-e/2,o=this._get(i,"onOpen");f.css({top:e+"px",maxHeight:s-e+"px"}),i.settings.effect==="fade"?f.fadeIn(i.settings.speed):f.slideDown(i.settings.speed),n("#sbToggle_"+i.uid).addClass(i.settings.classToggleOpen),this._state[i.uid]=u,i.isOpen=u,o&&o.apply(i.input?i.input[0]:null,[i]),n.data(t,r,i)}},_closeSelectbox:function(t){var u=this._getInst(t),f;u&&u.isOpen&&(f=this._get(u,"onClose"),u.settings.effect==="fade"?n("#sbOptions_"+u.uid).fadeOut(u.settings.speed):n("#sbOptions_"+u.uid).slideUp(u.settings.speed),n("#sbToggle_"+u.uid).removeClass(u.settings.classToggleOpen),this._state[u.uid]=i,u.isOpen=i,f&&f.apply(u.input?u.input[0]:null,[u]),n.data(t,r,u))},_newInst:function(n){var t=n[0].id.replace(/([^A-Za-z0-9_-])/g,"\\\\$1");return{id:t,input:n,uid:Math.floor(Math.random()*99999999),isOpen:i,isDisabled:i,settings:{}}},_getInst:function(t){try{return n.data(t,r)}catch(i){throw"Missing instance data for this selectbox";}},_get:function(n,i){return n.settings[i]!==t?n.settings[i]:this._defaults[i]}}),n.fn.selectbox=function(t){var i=Array.prototype.slice.call(arguments,1);return typeof t=="string"&&t=="isDisabled"?n.selectbox["_"+t+"Selectbox"].apply(n.selectbox,[this[0]].concat(i)):t=="option"&&arguments.length==2&&typeof arguments[1]=="string"?n.selectbox["_"+t+"Selectbox"].apply(n.selectbox,[this[0]].concat(i)):this.each(function(){typeof t=="string"?n.selectbox["_"+t+"Selectbox"].apply(n.selectbox,[this].concat(i)):n.selectbox._attachSelectbox(this,t)})},n.selectbox=new f,n.selectbox.version="0.2"})(jQuery)
*/